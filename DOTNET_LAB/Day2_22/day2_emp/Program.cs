using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace day2_emp
{
    class Program
    {
        static void Main(string[] args)
        {
            //Employee e = new Employee { Name = "nirali", EmpNo = 1, Basic = 188000, DeptNo = 1 };

            //Console.WriteLine(e.Name + " : " + e.EmpNo + " : " + e.Basic + " : " + e.DeptNo);
            //Console.WriteLine(e.GetNetSalary());

            Employee o1 = new Employee(1, "Amol", 123465);
            Employee o2 = new Employee(1, "Amol", 123465);
            Employee o3 = new Employee(1, "Amol");
            Employee o4 = new Employee(1);
            Employee o5 = new Employee();
            Employee o6 = new Employee(1, "Amol") { Basic = 150000 };
            Console.WriteLine(o1.ToString());
            Console.WriteLine(o2.ToString());
            Console.WriteLine(o3.ToString());
            Console.WriteLine(o4.ToString());
            Console.WriteLine(o5.ToString());
            Console.WriteLine(o6.ToString());
            Console.WriteLine(o2.ToString());
            Console.ReadLine();
        }
    }
    public class Employee
    {
        #region properties_emp
        private static int count = 1;

        private string name;
        public string Name
        {
            set
            {
                if (!string.IsNullOrEmpty(value))
                    name = value;
                else
                    throw new Exception("InvalidNameException");
            }
            get
            {
                return name;
            }
        }

        private int empNo = count++;
        public int EmpNo
        {
            //set
            //{
            //    if (value > 0)
            //        empNo = value;
            //    else
            //        Console.WriteLine("invalid value");
            //}
            get
            {
                return empNo;
            }
        }

        private decimal basic;
        public decimal Basic
        {
            set
            {
                if (value > 20000 && value < 300000)
                    basic = value;
                else
                    Console.WriteLine("invlaid salary");
            }
            get
            {
                return basic;
            }
        }

        private short deptNo;
        public short DeptNo
        {
            set
            {
                if (value > 0)
                    deptNo = value;
                else
                    Console.WriteLine("invalid deptno");
            }
            get
            {
                return deptNo;
            }
        }
        #endregion
        public virtual decimal GetNetSalary()
        {
            return Basic - Basic * (decimal)0.02;
        }


        public Employee(short DeptNo = 1, string Name = "N/A", decimal Basic = 20001/*, int EmpNo = 1*/)
        {
            this.DeptNo = DeptNo;
            this.Name = Name;
            this.Basic = Basic;
            //this.EmpNo = generateEmpId();
        }

        public override string ToString()
        {
            return this.EmpNo + " : " + this.Name + " : " + this.DeptNo + " : " + this.Basic;
        }
    }

    public class Manager : Employee
    {
        private string designation;
        public string Designation
        {
            set
            {
                if (!string.IsNullOrEmpty(value))
                    designation = value;
                else
                    Console.WriteLine("Invalid Input");
            }
            get
            {
                return designation;
            }
        }
        public Manager(short DeptNo, string Name, decimal Basic, string Designation)
        {
            this.Designation = Designation;
        }
    }

    public class GeneralManger : Manager
    {
        private string perks;
        public string Perks
        {
            set
            {
                perks = value;
            }
            get
            {
                return perks;
            }
        }

        public GeneralManger(short DeptNo, string Name, decimal Basic, string Designation ,string Perks) : base(DeptNo, Name, Basic, Designation)
        {
            this.Perks = Perks;
        }
    }

    public class CEO : Employee
    {
        public sealed override decimal GetNetSalary()
        {
            return Basic - Basic * (decimal)0.04; ;
        }

        public CEO(short DeptNo =1000, string Name="N/A", decimal Basic = 200000)
        {

        }
    }
}

//Create the following classes
//Employee
//   Prop	
//	string Name -> no blanks
//	int EmpNo -> readonly, autogenerated
//	short DeptNo -> > 0
//	decimal Basic -> some range
//   Methods
//	decimal CalcNetSalary()


//Manager: Employee
//  Prop

//    string Designation -> cant be blank
	

//GeneralManager : Manager
//   Prop
// 	string Perks -> no validations

//CEO : Employee
//      Make CalNetSalary() a sealed method

//NOTE : Overloaded constructors in all classes calling their base class constructor
//(use optional parameters and default values)